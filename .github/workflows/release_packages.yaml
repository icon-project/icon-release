on:
  workflow_dispatch:
    inputs:
      loopchain:
        description: 'loopchain tag'
        required: true
        default: '2.6.0'
      iconrpcserver:
        description: 'iconrpcserver tag'
        required: true
        default: '1.5.1'
      iconservice:
        description: 'iconservice tag'
        required: true
        default: '1.7.7'
      rewardcalculator:
        description: 'rewardcalculator tag'
        required: true
        default: '1.2.2'
      release_tag:
        description: 'github release tag'
        required: true
        default: '2020.09'
jobs:
  release:
    runs-on: ubuntu-latest
    # FIXME
    strategy:
      matrix:
        python-version: [3.7]
    env:
      BUILD_DIR: build
      ASSETS_DIR: assets
      PACKAGE_INFO: package_info.txt
      DOCKER_TAG: latest
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    steps:
      - name: Checkout release
        uses: actions/checkout@v2
      - name: checkout loopchain
        uses: actions/checkout@v2
        with:
          repository: icon-project/loopchain
          ref: ${{ github.event.inputs.loopchain }}
          path: loopchain
      - name: Checkout iconrpcserver
        uses: actions/checkout@v2
        with:
          repository: icon-project/icon-rpc-server
          ref: ${{ github.event.inputs.iconrpcserver }}
          path: icon-rpc-server
      - name: Checkout iconservice
        uses: actions/checkout@v2
        with:
          repository: icon-project/icon-service
          ref: ${{ github.event.inputs.iconservice }}
          path: icon-service
      - name: Checkout reward calculator
        uses: actions/checkout@v2
        with:
          repository: icon-project/rewardcalculator
          ref: ${{ github.event.inputs.rewardcalculator }}
          path: rewardcalculator
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # XXX this step for test
      - name: Workflow check
        run: |
          echo $PWD
          ls -al
      - name: Build packages
        run: |
          python -m pip install --upgrade pip pytz wheel
          mkdir -p $BUILD_DIR $ASSETS_DIR
          make

      # XXX this step for test
      - name: Prepare assets
        run: |
          import pytz
          from datetime import datetime
          tzinfo = pytz.timezone("Asia/Seoul")
          # hash_tag = "${{ hashFiles('Makefile') }}"
          # print(hash_tag)
          # version_tag = f"{datetime.now(tzinfo).strftime('%Y%m%dT%H%M%S')}x{hash_tag[:6]}"
          version_tag = f"{datetime.now(tzinfo).strftime('%Y.%m.%d-%H%M%S')}"
          print(f"::set-env name=DOCKER_TAG::{version_tag}")
        shell: python

      - name: Build assets
        # set-env truncate mulitline strings: https://github.com/actions/toolkit/issues/403
        run: |
          make assets DOCKER_TAG=$DOCKER_TAG RELEASE_TAG=$RELEASE_TAG
          BODY=$(cat $BUILD_DIR/$PACKAGE_INFO)
          BODY="${BODY//$'\n'/'%0A'}"
          echo "-------"
          echo $BODY
          echo "::set-env name=PACKAGE_INFO_BODY::$BODY"
      - name: Check build result
        run: |
          echo "docker_tag: DOCKER_TAG, github_tag: $RELEASE_TAG"
          ls -al ./$BUILD_DIR
          ls -al ./$ASSETS_DIR
          echo "-------"
          echo "${{ env.PACKAGE_INFO_BODY }}"
      - name: Upload release asset
        if: ${{ true }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_TAG }} # ${{ github.ref }}
          file: ${{ format('{0}/*', env.ASSETS_DIR) }}
          file_glob: true
          release_name: Release {{ env.RELEASE_TAG }}
          # prerelease: true
          overwrite: true
          body: |
            ${{ env.PACKAGE_INFO_BODY }}
